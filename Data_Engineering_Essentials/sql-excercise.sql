-- Here are some of the exercises for which you can write SQL queries to self evaluate using all the concepts we have learnt to write SQL Queries.
-- * All the exercises are based on retail tables.
-- * We have already setup the tables and also populated the data.
-- * We will use all the 6 tables in retail database as part of these exercises.

-- Here are the commands to validate the tables
SELECT count(*) FROM departments;
SELECT count(*) FROM categories;
SELECT count(*) FROM products;
SELECT count(*) FROM orders;
SELECT count(*) FROM order_items;
SELECT count(*) FROM customers;

-- ### Exercise 1 - Customer order count

-- Get order count per customer for the month of 2014 January.

-- * Tables - `orders` and `customers`
-- * Data should be sorted in descending order by count and ascending order by customer id.
-- * Output should contain `customer_id`, `customer_fname`, `customer_lname` and `customer_order_count`.

SELECT 
	o.order_customer_id,
	c.customer_fname,
	c.customer_lname,
	COUNT(o.order_id) customer_order_count
FROM orders o
JOIN customers c ON o.order_customer_id = c.customer_id
WHERE to_char(order_date, 'yyyy-mm') = '2014-01'
GROUP BY 1, 2, 3
ORDER BY 4 DESC, 1 ASC;



-- ### Exercise 2 - Dormant Customers

-- Get the customer details who have not placed any order for the month of 2014 January.
-- * Tables - `orders` and `customers`
-- * Output Columns - **All columns from customers as is**
-- * Data should be sorted in ascending order by `customer_id`
-- * Output should contain all the fields from `customers`
-- * Make sure to run below provided validation queries and validate the output.

SELECT count(DISTINCT order_customer_id)
FROM orders
WHERE to_char(order_date, 'yyyy-MM') = '2014-01';

SELECT count(*)
FROM customers;

SELECT DISTINCT order_customer_id
FROM orders
WHERE to_char(order_date, 'yyyy-MM') = '2014-01';

-- Get the difference
-- Get the count using solution query, both the difference and this count should match

-- * Hint: You can use `NOT IN` or `NOT EXISTS` or `OUTER JOIN` to solve this problem.

SELECT *
FROM customers c
WHERE NOT EXISTS (
	SELECT 1
	FROM orders o
	WHERE o.order_customer_id = c.customer_id
	AND to_char(order_date, 'yyyy-MM') = '2014-01'
);

SELECT *
FROM customers c
WHERE c.customer_id NOT IN (
	SELECT DISTINCT order_customer_id
	FROM orders
	WHERE to_char(order_date, 'yyyy-MM') = '2014-01'
);

SELECT c.*
FROM customers c
LEFT JOIN orders o
    ON c.customer_id = o.order_customer_id
    AND to_char(o.order_date, 'yyyy-MM') = '2014-01'
WHERE o.order_customer_id IS NULL;



-- ### Exercise 3 - Revenue Per Customer

-- Get the revenue generated by each customer for the month of 2014 January
-- * Tables - `orders`, `order_items` and `customers`
-- * Data should be sorted in descending order by revenue and then ascending order by `customer_id`
-- * Output should contain `customer_id`, `customer_fname`, `customer_lname`, `customer_revenue`.
-- * If there are no orders placed by customer, then the corresponding revenue for a given customer should be 0.
-- * Consider only `COMPLETE` and `CLOSED` orders

WITH data AS (
	SELECT 
		o.order_customer_id,
		ROUND(SUM(oi.order_item_subtotal)::"numeric", 2) customer_revenue
	FROM orders o
	JOIN order_items oi ON o.order_id = oi.order_item_order_id
	WHERE LOWER(order_status) IN ('complete', 'closed')
		AND to_char(order_date, 'yyyy-MM') = '2014-01'
	GROUP BY 1
) SELECT c.customer_id,
	c.customer_fname,
	c.customer_lname,
	COALESCE(d.customer_revenue, 0) customer_revenue
FROM customers c
LEFT JOIN data d ON c.customer_id = d.order_customer_id
ORDER BY 4 DESC, 1 ASC;

-- ### Exercise 4 - Revenue Per Category

-- Get the revenue generated for each category for the month of 2014 January
-- * Tables - `orders`, `order_items`, `products` and `categories`
-- * Data should be sorted in ascending order by `category_id`.
-- * Output should contain all the fields from `categories` along with the revenue as `category_revenue`.
-- * Consider only `COMPLETE` and `CLOSED` orders

WITH data AS (
	SELECT cat.category_id,
		cat.category_name,
		ROUND(SUM(oi.order_item_subtotal)::"numeric", 2) category_revenue
	FROM orders o
	JOIN order_items oi ON o.order_id = oi.order_item_order_id
	JOIN products p ON oi.order_item_product_id = p.product_id
	JOIN categories cat ON p.product_category_id = cat.category_id
	WHERE LOWER(order_status) IN ('complete', 'closed')
		AND to_char(order_date, 'yyyy-MM') = '2014-01'
	GROUP BY 1, 2
)SELECT cat.*,
	COALESCE(category_revenue, 0)
FROM categories cat
LEFT JOIN data d ON cat.category_id = d.category_id
ORDER BY cat.category_id ASC;

SELECT * FROM order_items;
SELECT * FROM products;
SELECT * FROM categories;


-- ### Exercise 5 - Product Count Per Department

-- Get the count of products for each department.
-- * Tables - `departments`, `categories`, `products`
-- * Data should be sorted in ascending order by `department_id`
-- * Output should contain all the fields from `departments` and the product count as `product_count`

SELECT * FROM departments;
SELECT * FROM categories;
SELECT * FROM products;

WITH data AS (
	SELECT cat.category_department_id,
		COUNT(DISTINCT p.product_id) product_count
	FROM products p
	JOIN categories cat ON p.product_category_id = cat.category_id
	GROUP BY 1
) SELECT dep.*, COALESCE(d.product_count, 0) product_count
FROM departments dep
LEFT JOIN data d ON dep.department_id = d.category_department_id
ORDER BY dep.department_id ASC;


