kubectl -> Used to tell a node what to do

minikube -> is a development tool to simulate Kubernetes locally, spin up containers. In production generally AWS Kubernetes or GCP Kubernetes is used.

Kubernetes is used to create objects.

Kubernetes does not use images that we build and tag on our local machine.  We need to first push the image to a registry accessible by our cluster (like Docker Hub).

apiVersion in the start of Kubernetes config files depends on what what type of object it is. If a pod then "v1", if apps the apps/v1. It unlocks the functionality for that. Look up docs to know what to use when.

In Kubernetes we deploy Pods. It is the smallest thing that we can deploy in Kubernetes. Pods can container a single container or multiple containers which closely depends on each other to function properly. that is inside a pod if one container fails all other containers also fail.

Pods can be of multiple types but services are of 4 types,

4 types of services:
1. ClusterIP
2. NodePort -> Exposes a container to the outside world (only good for dev purposes)
3. LoadBalancer
4. Ingress

Kubernetes Node: Each node is a VM which has a copy of docker running inside it. It pulls the required image and deploys it. One node can have multiple tightly coupled pods inside it.
One Node can have multiple deployments running under it.

In development and production we use Deployment instead of pods (Kubernetes kind). Deployment has a config which it uses to spin up pods.

Pods can come and go, this can lead to frequent IP endpoint changes. Service helps here by keeping track of each Pods IP and providing a single IP for the external world to connect to.


Kubernetes Volume is tied to a POD and any container inside the pod can access it. But if a pod dies the volume also dies. e.g. 2 postgres service inside a pod can access the same volume and data is not lost if one of the postgres server dies. Whereas when the POD dies all data is lost.

Persistent Volume is not tied to POD, so when a POD dies and new pod is created it can connect to the persistent volume with no data loss.

Persistent Volume Claims is like a bill board telling the users what volume options they have. Users give their requirement via pod config to Kubernetes. Kubernetes then checks if the volume is already generated i.e. Statically provisioned persistent volume and gives it. Or else Kubernetes will create the required volume on the fly i.e. Dynamically provisioned Persistent Volume.

In Kubernetes we store passwords in encrypted form by generating it using a special command and referencing it in future.
